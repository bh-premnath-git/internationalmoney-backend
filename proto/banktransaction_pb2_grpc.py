# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import banktransaction_pb2 as banktransaction__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in banktransaction_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TransactionServiceStub(object):
    """----- Service ----------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTransaction = channel.unary_unary(
                '/banktransaction.TransactionService/CreateTransaction',
                request_serializer=banktransaction__pb2.CreateTransactionRequest.SerializeToString,
                response_deserializer=banktransaction__pb2.Transaction.FromString,
                _registered_method=True)
        self.GetTransaction = channel.unary_unary(
                '/banktransaction.TransactionService/GetTransaction',
                request_serializer=banktransaction__pb2.TransactionId.SerializeToString,
                response_deserializer=banktransaction__pb2.Transaction.FromString,
                _registered_method=True)
        self.ListTransactionsForUser = channel.unary_unary(
                '/banktransaction.TransactionService/ListTransactionsForUser',
                request_serializer=banktransaction__pb2.UserId.SerializeToString,
                response_deserializer=banktransaction__pb2.TransactionList.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/banktransaction.TransactionService/Ping',
                request_serializer=banktransaction__pb2.Empty.SerializeToString,
                response_deserializer=banktransaction__pb2.Empty.FromString,
                _registered_method=True)


class TransactionServiceServicer(object):
    """----- Service ----------------------------------------------

    """

    def CreateTransaction(self, request, context):
        """Create a new transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """Get one transaction by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTransactionsForUser(self, request, context):
        """List all transactions for a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Ping (health check)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTransaction,
                    request_deserializer=banktransaction__pb2.CreateTransactionRequest.FromString,
                    response_serializer=banktransaction__pb2.Transaction.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=banktransaction__pb2.TransactionId.FromString,
                    response_serializer=banktransaction__pb2.Transaction.SerializeToString,
            ),
            'ListTransactionsForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTransactionsForUser,
                    request_deserializer=banktransaction__pb2.UserId.FromString,
                    response_serializer=banktransaction__pb2.TransactionList.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=banktransaction__pb2.Empty.FromString,
                    response_serializer=banktransaction__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'banktransaction.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('banktransaction.TransactionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """----- Service ----------------------------------------------

    """

    @staticmethod
    def CreateTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banktransaction.TransactionService/CreateTransaction',
            banktransaction__pb2.CreateTransactionRequest.SerializeToString,
            banktransaction__pb2.Transaction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banktransaction.TransactionService/GetTransaction',
            banktransaction__pb2.TransactionId.SerializeToString,
            banktransaction__pb2.Transaction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTransactionsForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banktransaction.TransactionService/ListTransactionsForUser',
            banktransaction__pb2.UserId.SerializeToString,
            banktransaction__pb2.TransactionList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banktransaction.TransactionService/Ping',
            banktransaction__pb2.Empty.SerializeToString,
            banktransaction__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
