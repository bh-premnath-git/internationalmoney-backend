services:
  gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      JWKS_URL: "http://keycloak:8080/realms/money-transfer/protocol/openid-connect/certs"
      REDIS_URL: "redis://redis:6379/0"
    depends_on:
      - user_service
      - transaction_service
      - postgres
      - redis
      - kafka
      - keycloak

  user_service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    ports:
      - "50051:50051"
      - "9100:9100"
    depends_on:
      - postgres
      - redis
      - kafka

  transaction_service:
    build:
      context: .
      dockerfile: transaction_service/Dockerfile
    ports:
      - "50052:50052"
      - "9101:9100"
    depends_on:
      - postgres
      - redis
      - kafka

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  kafka:
    image: bitnami/kafka:3
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    command: start-dev --import-realm
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  pg_data:
    driver: local